import gym
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Flatten, Input, Activation, Concatenate

env = gym.make('Pendulum-v0')
print("Observation space: {}".format(env.observation_space))
print("Action space: {}".format(env.action_space))

states = env.observation_space.shape
actions = env.action_space.shape[0]


def build_actor():
    actor = Sequential()
    actor.add(Flatten(input_shape=(1, ) + states))
    actor.add(Dense(128, activation='relu'))
    actor.add(Dense(64, activation='relu'))
    actor.add(Dense(64, activation='relu'))
    actor.add(Dense(actions, activation='linear'))
    return actor


action_input = Input(shape=(actions,), name='action_input')
observation_input = Input(shape=(1,) + env.observation_space.shape, name='observation_input')
flattened_observation = Flatten()(observation_input)


def build_critic():
    x = Concatenate()([action_input, flattened_observation])
    x = Dense(32)(x)
    x = Activation('relu')(x)
    x = Dense(32)(x)
    x = Activation('relu')(x)
    x = Dense(32)(x)
    x = Activation('relu')(x)
    x = Dense(1)(x)
    x = Activation('linear')(x)
    critic = Model(inputs=[action_input, observation_input], outputs=x)
    return critic


def build_mu_model():
    model = Sequential()
    model.add(Flatten(input_shape=(1,) + states))
    model.add(Dense(16, activation='relu'))
    model.add(Dense(16, activation='relu'))
    model.add(Dense(16, activation='relu'))
    model.add(Dense(actions, activation='linear'))
    return model
